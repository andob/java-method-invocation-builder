{
  "name": "Java-method-invocation-builder",
  "tagline": "Creates builders that enables code to cleanly invoke dirty methods.",
  "body": "# Java Method Invocation Builder [![Build Status](https://travis-ci.org/tomasbjerre/java-method-invocation-builder.svg?branch=master)](https://travis-ci.org/tomasbjerre/java-method-invocation-builder) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/se.bjurr.jmib/java-method-invocation-builder/badge.svg)](https://maven-badges.herokuapp.com/maven-central/se.bjurr.jmib/java-method-invocation-builder)\r\n\r\nThis is a Java library that enables automatic generation of builders at compile time. Builders used for invoking methods on instantiated objects. It enables default values of method parameters and is making the invocations readable.\r\n\r\nIt does not solve the same problem as [Immutables](https://immutables.github.io/) or [POJOBuilder](https://github.com/mkarneim/pojobuilder). They are generating builders for creating instances of types. This is about invoking methods on previously instantiated types.\r\n\r\nSometimes you are forced to invoke methods that take alot of parameters. This makes the invoking code dirty and hard to read. The problem may be solved with a builder. The builder can have default values for each parameter and when you want to call the method, you just supply the parameters you want to change. This library automates the creation of such builders.\r\n\r\nThere are some example builders generated [here](https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/src/test/expected/se/bjurr/jmib/testcases).\r\n\r\nThere is a Gradle example [here](https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-gradle).\r\n\r\nThere is a Maven example [here](https://github.com/tomasbjerre/java-method-invocation-builder/tree/master/example-maven).\r\n\r\n## Examples\r\n\r\nHere are 2 examples. One is simple with a concrete class. The other one is the original use case with a REST API client.\r\n\r\n### Concrete class\r\n\r\nIf you have a class annotated with `@GenerateMethodInvocationBuilder` like this:\r\n```\r\n@GenerateMethodInvocationBuilder\r\npublic class ClassWithConstructor {\r\n private final Integer age;\r\n\r\n public ClassWithConstructor(Integer age) {\r\n  this.age = age;\r\n }\r\n\r\n public Integer getAgeAfter(@Default(\"5\") Integer years) {\r\n  return this.age + years;\r\n }\r\n}\r\n```\r\n\r\nA builder will be generated so that you can do this:\r\n```\r\n ClassWithConstructor instance = new ClassWithConstructor(5);\r\n Integer ageAfter = ClassWithConstructorGetAgeAfterBuilder.getAgeAfter()//\r\n  .invoke(instance);\r\n assertThat(ageAfter)//\r\n  .isEqualTo(10);\r\n```\r\n\r\nOr avoid using the default value of years:\r\n```\r\n ClassWithConstructor instance = new ClassWithConstructor(5);\r\n Integer ageAfter = ClassWithConstructorGetAgeAfterBuilder.getAgeAfter()//\r\n  .withYears(2)//\r\n  .invoke(instance);\r\n assertThat(ageAfter)//\r\n  .isEqualTo(7);\r\n```\r\n\r\n### REST API client with interface\r\n\r\nThis is the original use case that triggered me to start working with this project.\r\n\r\nI am using [Retrofit](http://square.github.io/retrofit/) to create a client for BitBucket Server. That project is hosted [here](https://github.com/tomasbjerre/bitbucket-server-java-client). Here is the interface that specifies the *pullrequests* REST resource.\r\n\r\n```\r\npublic interface BitBucketServerService {\r\n @GET(\"/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&at={at}&state={state}&order={order}&withattributes={withattributes}&withproperties={withproperties}\")\r\n Call<BitbucketServerResponse<BitBucketServerPullRequest>> pullRequests(//\r\n   @Query(\"projectkey\") String projectKey,//\r\n   @Query(\"repositoryslug\") String repositoryslug,//\r\n   @Query(\"direction\") String direction,//\r\n   @Query(\"at\") Integer at,//\r\n   @Query(\"state\") String state,//\r\n   @Query(\"order\") String order,//\r\n   @Query(\"withattributes\") String withattributes,//\r\n   @Query(\"withproperties\") String withproperties);\r\n}\r\n```\r\n\r\nWhen invoking that method without this library it would look something like this.\r\n```\r\nbitBucketServerService.pullRequests(\"PROJ\",\"REPO\",\"INCOMING\",\"23\",\"OPEN\",\"NEWEST\",\"true\",\"true\");\r\nbitBucketServerService.pullRequests(\"PROJ\",\"REPO\",\"INCOMING\",\"24\",\"OPEN\",\"NEWEST\",\"true\",\"true\");\r\nbitBucketServerService.pullRequests(\"PROJ\",\"REPO\",\"INCOMING\",\"25\",\"OPEN\",\"NEWEST\",\"true\",\"true\");\r\n```\r\n\r\nThis library provides the `@GenerateMethodInvocationBuilder` annotation that can be added to a type like this.\r\n```\r\n@GenerateMethodInvocationBuilder\r\npublic interface BitBucketServerService {\r\n @GET(\"/rest/api/1.0/projects/{projectkey}/repos/{repositoryslug}/pull-requests?direction={direction}&at={at}&state={state}&order={order}&withattributes={withattributes}&withproperties={withproperties}\")\r\n Call<BitbucketServerResponse<BitBucketServerPullRequest>> pullRequests(//\r\n   @Default(\"PROJ\") @Query(\"projectkey\") String projectKey,//\r\n   @Default(\"REPO\") @Query(\"repositoryslug\") String repositoryslug,//\r\n   @Default(\"INCOMING\") @Query(\"direction\") String direction,//\r\n   @Default(\"23\") @Query(\"at\") String at,//\r\n   @Default(\"OPEN\") @Query(\"state\") String state,//\r\n   @Default(\"NEWEST\") @Query(\"order\") String order,//\r\n   @Default(\"true\") @Query(\"withattributes\") String withattributes,//\r\n   @Default(\"true\") @Query(\"withproperties\") String withproperties);\r\n}\r\n```\r\n\r\nA builder is automatically generated and we can do.\r\n```\r\nBitBucketServerServicePullRequestsBuilder.pullRequests()\r\n .invoke(bitBucketServerService);\r\n\r\nBitBucketServerServicePullRequestsBuilder.pullRequests()\r\n .withAt(\"24\")\r\n .invoke(bitBucketServerService);\r\n\r\nBitBucketServerServicePullRequestsBuilder.pullRequests()\r\n .withAt(\"25\")\r\n .invoke(bitBucketServerService);\r\n```\r\n\r\n## Developer instructions\r\n\r\nTo build the code, have a look at `.travis.yml`.\r\n\r\nTo do a release you need to do `./gradlew release` and release the artifact from [staging](https://oss.sonatype.org/#stagingRepositories). More information [here](http://central.sonatype.org/pages/releasing-the-deployment.html).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}